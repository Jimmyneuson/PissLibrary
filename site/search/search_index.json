{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PissLibrary \u00b6 About \u00b6 A piss library for all your piss needs. This includes an easy to understand interface and beautifully written documentation. I also assure you, there is no piss in this library. Never again will you have to worry about studying to use a simple library or even shit in your piss library. Just use it out of the box! Support \u00b6 You can support me and this library by pinging and thanking me in the roblox discord server (jimmyneuson#3519). Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 --Get the library local PissLibrary = require ( \"PissLibrary\" ) --Create a person local person = PissLibrary . new () --Gets a random urine type local urineType = PissLibrary . RandomUrineType () --Make them piss once! person : Piss ( urineType ) --Take a little rest why dont ya? person : Rest () --Make them piss multiple times! person : MultiPiss ( 50 , urineType ) --wait a minute... person : Shit ()","title":"Home"},{"location":"#pisslibrary","text":"","title":"PissLibrary"},{"location":"#about","text":"A piss library for all your piss needs. This includes an easy to understand interface and beautifully written documentation. I also assure you, there is no piss in this library. Never again will you have to worry about studying to use a simple library or even shit in your piss library. Just use it out of the box!","title":"About"},{"location":"#support","text":"You can support me and this library by pinging and thanking me in the roblox discord server (jimmyneuson#3519).","title":"Support"},{"location":"#example","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 --Get the library local PissLibrary = require ( \"PissLibrary\" ) --Create a person local person = PissLibrary . new () --Gets a random urine type local urineType = PissLibrary . RandomUrineType () --Make them piss once! person : Piss ( urineType ) --Take a little rest why dont ya? person : Rest () --Make them piss multiple times! person : MultiPiss ( 50 , urineType ) --wait a minute... person : Shit ()","title":"Example"},{"location":"api/","text":"Api Documentation \u00b6 Constructor \u00b6 Person PissLibrary.new() constructs a new person which is exposed to several other methods and no properties. People also keep track of how much piss they have left. Here is a quick example of a person being constructed. 1 2 3 local PissLibrary = require ( \"PissLibrary\" ) local person = PissLibrary . new () Static Methods \u00b6 Methods of the library which can't be directly accessed by a person. GetUrineTypes \u00b6 Table PissLibrary.GetUrineTypes() returns all the available urine types available. This example shows all the possible urine types available. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 local PissLibrary = require ( \"PissLibrary\" ) local urineTypes = PissLibrary . GetUrineTypes () --[[ { Clear, Slightly Yellow, Very Yellow, Brown, Bloody } ]] for _ , urineType in ipairs ( urineTypes ) do print ( urineType ) end RandomUrineType \u00b6 String PissLibrary.RandomUrineType() returns a randomly selected urine type from PissLibrary.RandomUrineType() . This example randomly prints two urine types. 1 2 3 4 local PissLibrary = require ( \"PissLibrary\" ) print ( PissLibrary . RandomUrineType ()) -- Clear print ( PissLibrary . RandomUrineType ()) -- Bloody Methods \u00b6 These methods are directly exposed to objects (or people) constructed with PissLibrary.new() . Piss \u00b6 void Person:Piss(String urineType) This will print a message telling you what type of urine you pissed. It will also take away some piss from the person. The following example shows how to use it and what it prints. 1 2 3 4 5 6 7 8 local PissLibrary = require ( \"PissLibrary\" ) local person = PissLibrary . new () local urineType = \"Clear\" -- has to be a valid urine type person : Piss ( urineType ) --PISSING... --PISS IS Clear MultiPiss \u00b6 void Person:MultiPiss(Int amount, [, String urineType]) This is the same as Person:Piss() but it does it multiple times. It will go until there is no piss left or the amount is reached. This also optionally takes a urineType, otherwise it will be random. 1 2 3 4 5 6 7 8 local PissLibrary = require ( \"PissLibrary\" ) local person = PissLibrary . new () person : MultiPiss ( 2 ) --PISSING... --PISS IS Clear --PISSING... --PISS IS Bloody There is a slight chance of shit.","title":"Api Documentation"},{"location":"api/#api-documentation","text":"","title":"Api Documentation"},{"location":"api/#constructor","text":"Person PissLibrary.new() constructs a new person which is exposed to several other methods and no properties. People also keep track of how much piss they have left. Here is a quick example of a person being constructed. 1 2 3 local PissLibrary = require ( \"PissLibrary\" ) local person = PissLibrary . new ()","title":"Constructor"},{"location":"api/#static-methods","text":"Methods of the library which can't be directly accessed by a person.","title":"Static Methods"},{"location":"api/#geturinetypes","text":"Table PissLibrary.GetUrineTypes() returns all the available urine types available. This example shows all the possible urine types available. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 local PissLibrary = require ( \"PissLibrary\" ) local urineTypes = PissLibrary . GetUrineTypes () --[[ { Clear, Slightly Yellow, Very Yellow, Brown, Bloody } ]] for _ , urineType in ipairs ( urineTypes ) do print ( urineType ) end","title":"GetUrineTypes"},{"location":"api/#randomurinetype","text":"String PissLibrary.RandomUrineType() returns a randomly selected urine type from PissLibrary.RandomUrineType() . This example randomly prints two urine types. 1 2 3 4 local PissLibrary = require ( \"PissLibrary\" ) print ( PissLibrary . RandomUrineType ()) -- Clear print ( PissLibrary . RandomUrineType ()) -- Bloody","title":"RandomUrineType"},{"location":"api/#methods","text":"These methods are directly exposed to objects (or people) constructed with PissLibrary.new() .","title":"Methods"},{"location":"api/#piss","text":"void Person:Piss(String urineType) This will print a message telling you what type of urine you pissed. It will also take away some piss from the person. The following example shows how to use it and what it prints. 1 2 3 4 5 6 7 8 local PissLibrary = require ( \"PissLibrary\" ) local person = PissLibrary . new () local urineType = \"Clear\" -- has to be a valid urine type person : Piss ( urineType ) --PISSING... --PISS IS Clear","title":"Piss"},{"location":"api/#multipiss","text":"void Person:MultiPiss(Int amount, [, String urineType]) This is the same as Person:Piss() but it does it multiple times. It will go until there is no piss left or the amount is reached. This also optionally takes a urineType, otherwise it will be random. 1 2 3 4 5 6 7 8 local PissLibrary = require ( \"PissLibrary\" ) local person = PissLibrary . new () person : MultiPiss ( 2 ) --PISSING... --PISS IS Clear --PISSING... --PISS IS Bloody There is a slight chance of shit.","title":"MultiPiss"}]}